import logging
import json
import os
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config import ADMIN_IDS, SUPERADMIN_ID
from states import BotStates

logger = logging.getLogger(__name__)

ADMINS_FILE = "admins.json"


async def process_manage_admins(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    if message.from_user.id != SUPERADMIN_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É.")
        return


    builder = ReplyKeyboardBuilder()
    buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
        "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]

    for button in buttons:
        builder.add(types.KeyboardButton(text=button))


    builder.adjust(2)

    await message.answer(
        "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


async def process_add_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != SUPERADMIN_ID:
        return

    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )

    await state.set_state(BotStates.waiting_for_new_admin_id)


async def process_new_admin_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    try:
        admin_id = int(message.text.strip())


        if admin_id in ADMIN_IDS:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.clear()
            return


        ADMIN_IDS.append(admin_id)


        save_admins_to_file()

        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")


async def process_list_admins(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if message.from_user.id != SUPERADMIN_ID:
        return

    admins_text = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"

    for i, admin_id in enumerate(ADMIN_IDS, 1):

        if admin_id == SUPERADMIN_ID:
            admins_text += f"{i}. {admin_id} (üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        else:
            admins_text += f"{i}. {admin_id}\n"

    await message.answer(admins_text)


async def process_remove_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != SUPERADMIN_ID:
        return


    admins_to_remove = [admin_id for admin_id in ADMIN_IDS if admin_id != SUPERADMIN_ID]

    if not admins_to_remove:
        await message.answer("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return


    await state.update_data(admins_to_remove=admins_to_remove)

    admins_text = "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"

    for i, admin_id in enumerate(admins_to_remove, 1):
        admins_text += f"{i}. {admin_id}\n"

    admins_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"

    await message.answer(admins_text)

    await state.set_state(BotStates.waiting_for_admin_to_remove)


async def process_admin_to_remove(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return


    data = await state.get_data()
    admins_to_remove = data.get('admins_to_remove', [])

    try:
        input_text = message.text.strip()


        try:

            index = int(input_text) - 1
            if 0 <= index < len(admins_to_remove):
                admin_id_to_remove = admins_to_remove[index]
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–∞–º ID
                admin_id_to_remove = int(input_text)
                if admin_id_to_remove not in admins_to_remove:
                    raise ValueError("ID not in list")
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return


        if admin_id_to_remove in ADMIN_IDS:
            ADMIN_IDS.remove(admin_id_to_remove)


            save_admins_to_file()

            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer(f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")


        await state.clear()

    except Exception as e:
        logger.error(f"Error removing admin: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")


async def process_back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from handlers.commands import cmd_start
    await cmd_start(message)
    await state.clear()


def save_admins_to_file():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(ADMINS_FILE, 'w') as f:
            json.dump(list(ADMIN_IDS), f)
        logger.info(f"Admins list saved to {ADMINS_FILE}")
        return True
    except Exception as e:
        logger.error(f"Error saving admins list: {e}")
        return False


def load_admins_from_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(ADMINS_FILE):
            with open(ADMINS_FILE, 'r') as f:
                admins = json.load(f)
                logger.info(f"Loaded {len(admins)} admin IDs from file")
                return admins
    except Exception as e:
        logger.error(f"Error loading admins list: {e}")
    return None


try:
    saved_admins = load_admins_from_file()
    if saved_admins:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è SUPERADMIN_ID –ø–µ—Ä–≤—ã–º
        updated_admins = [SUPERADMIN_ID]
        for admin_id in saved_admins:
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ SUPERADMIN_ID
            if admin_id != SUPERADMIN_ID and admin_id not in updated_admins:
                updated_admins.append(admin_id)

        ADMIN_IDS.clear()
        ADMIN_IDS.extend(updated_admins)
        logger.info(f"Updated ADMIN_IDS with {len(ADMIN_IDS)} admin IDs from file")
except Exception as e:
    logger.error(f"Error initializing admins from file: {e}")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    dp.message.register(
        process_manage_admins,
        F.text == "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"
    )

    dp.message.register(
        process_add_admin,
        F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )
    dp.message.register(
        process_new_admin_input,
        BotStates.waiting_for_new_admin_id
    )

    dp.message.register(
        process_list_admins,
        F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    )

    dp.message.register(
        process_remove_admin,
        F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )
    dp.message.register(
        process_admin_to_remove,
        BotStates.waiting_for_admin_to_remove
    )

    dp.message.register(
        process_back_to_main_menu,
        F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )