import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config import ADMIN_IDS, SUPERADMIN_ID

logger = logging.getLogger(__name__)


async def cmd_start(message: types.Message):
    """Start command handler - entry point to the bot"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    builder = ReplyKeyboardBuilder()
    buttons = [
        "üìå –î–æ–±–∞–≤–∏—Ç—å cookies",
        "üîç –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        "üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É",
        "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    ]

    if message.from_user.id == SUPERADMIN_ID:
        buttons.append("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")

    for button in buttons:
        builder.add(types.KeyboardButton(text=button))

    builder.adjust(2)

    await message.answer(
        "ü§ñ <b>TikTok –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—â–∏–π –ë–æ—Ç</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ TikTok.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


async def cmd_help(message: types.Message):
    """Help command handler"""
    if message.from_user.id not in ADMIN_IDS:
        return

    help_text = (
        "ü§ñ <b>TikTok –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—â–∏–π –ë–æ—Ç - –ü–æ–º–æ—â—å</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ cookies –æ—Ç TikTok\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
        "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏ –∑–∞–¥–µ—Ä–∂–∫—É\n"
        "5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –í–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ cookies TikTok –¥–ª—è —Ä–∞–±–æ—Ç—ã."
    )

    await message.answer(help_text)


async def cmd_status(message: types.Message, state: FSMContext):
    """Status command handler - shows current bot settings"""
    if message.from_user.id not in ADMIN_IDS:
        return

    data = await state.get_data()

    cookies_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" if data.get('cookies') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    search_query = data.get('search_query', "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    comment_text = data.get('comment_text', "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    comments_count = data.get('comments_count', 5)
    delay = data.get('delay', 1.0)
    delay_mode = data.get('delay_mode', 'fixed')
    delay_info = f"{delay}—Å (—Ñ–∏–∫—Å.)" if delay_mode == 'fixed' else f"{delay}—Å (—Å–ª—É—á–∞–π–Ω–æ ¬±50%)"
    is_running = "–ó–∞–ø—É—â–µ–Ω" if data.get('is_running', False) else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    status_text = (
        "ü§ñ <b>TikTok –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—â–∏–π –ë–æ—Ç - –°—Ç–∞—Ç—É—Å</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> {is_running}\n\n"
        f"<b>Cookies:</b> {cookies_status}\n"
        f"<b>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b> {search_query}\n"
        f"<b>–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b> {comment_text}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:</b> {comments_count}\n"
        f"<b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {delay_info}\n"
    )

    await message.answer(status_text)


def register_handlers(dp: Dispatcher):
    """Register all command handlers"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_status, Command("status"))
